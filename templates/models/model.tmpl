package models

import (
	"fmt"
	"strings"
)

type {{.Name}} struct {
	ID        uint   `json:"id"`
    {{- range .ModelField}}
	{{.Name}} {{.Type}} `json:"{{.JsonTag}}" validate:"{{.Validate}}"`
    {{- end}}
	CreatedAt int `json:"created_at"`
	UpdatedAt int `json:"updated_at"`
	DeletedAt int `json:"deleted_at"`
}

func (m *{{.Name}}) TableName() string {
	return "tb_{{.LowerName}}"
}

func (m *{{.Name}}) QueryInsert() string {
	fields := []string{ {{- range .ModelField}}"{{.JsonTag}}", {{- end}} "created_at", "updated_at"}
	values := []string{ {{- range $index, $_ := .ModelField}}fmt.Sprintf("$%d", {{$index | add 1}}), {{- end}} fmt.Sprintf("$%v", {{add (len .ModelField) 1}}), fmt.Sprintf("$%v", {{add (len .ModelField) 2}})}
	return fmt.Sprintf("INSERT INTO %s (%s) VALUES (%s) RETURNING id", m.TableName(), strings.Join(fields, ", "), strings.Join(values, ", "))
}

func (m *{{.Name}}) QueryGetAll() string {
	fields := []string{"id", {{- range .ModelField}}"{{.JsonTag}}", {{- end}} "created_at", "updated_at"}
	return fmt.Sprintf("SELECT %s FROM %s", strings.Join(fields, ", "), m.TableName())
}

func (m *{{.Name}}) QueryGetByID() string {
	fields := []string{"id", {{- range .ModelField}}"{{.JsonTag}}", {{- end}} "created_at", "updated_at"}
	return fmt.Sprintf("SELECT %s FROM %s WHERE id = $1", strings.Join(fields, ", "), m.TableName())
}

func (m *{{.Name}}) QueryUpdate() string {
	setFields := []string{
		{{- range $index, $field := .ModelField}}
		fmt.Sprintf("%s = $%d", "{{.JsonTag}}", {{$index | add 1}}),
		{{- end}}
		"updated_at = $%s" + fmt.Sprintf("%d", {{add (len .ModelField) 1}}),
	}
	return fmt.Sprintf("UPDATE %s SET %s WHERE id = $%d", m.TableName(), strings.Join(setFields, ", "), {{add (len .ModelField) 2}})
}

func (m *{{.Name}}) QueryDelete() string {
	return fmt.Sprintf("DELETE FROM %s WHERE id = $1", m.TableName())
}
