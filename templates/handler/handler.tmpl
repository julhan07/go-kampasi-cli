package handlers

import (
    "github.com/gofiber/fiber/v2"
    "{{.PackagePath}}/interfaces"
    "{{.PackagePath}}/models"
)

type {{.Name}}Handler struct {
    service interfaces.{{.Name}}Service
}

func New{{.Name}}Handler(service interfaces.{{.Name}}Service) interfaces.{{.Name}}Handler {
    return &{{.Name}}Handler{
        service: service,
    }
}

func (h *{{.Name}}Handler) Create(c *fiber.Ctx) error {
    var {{.LowerName}} models.{{.Name}}
    if err := c.BodyParser(&{{.LowerName}}); err != nil {
        return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
            "error": err.Error(),
        })
    }
    if err := h.service.Create{{.Name}}(&{{.LowerName}}); err != nil {
        return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
            "error": err.Error(),
        })
    }
    return c.Status(fiber.StatusCreated).JSON({{.LowerName}})
}

func (h *{{.Name}}Handler) GetByID(c *fiber.Ctx) error {
    id, err := c.ParamsInt("id")
    if err != nil {
        return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
            "error": "Invalid ID",
        })
    }
    {{.LowerName}}, err := h.service.Get{{.Name}}ByID(uint(id))
    if err != nil {
        return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
            "error": err.Error(),
        })
    }
    return c.JSON({{.LowerName}})
}

func (h *{{.Name}}Handler) Update(c *fiber.Ctx) error {
    id, err := c.ParamsInt("id")
    if err != nil {
        return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
            "error": "Invalid ID",
        })
    }
    var {{.LowerName}} models.{{.Name}}
    if err := c.BodyParser(&{{.LowerName}}); err != nil {
        return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
            "error": err.Error(),
        })
    }
    {{.LowerName}}.ID = uint(id)
    if err := h.service.Update{{.Name}}(&{{.LowerName}}); err != nil {
        return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
            "error": err.Error(),
        })
    }
    return c.JSON({{.LowerName}})
}

func (h *{{.Name}}Handler) Delete(c *fiber.Ctx) error {
    id, err := c.ParamsInt("id")
    if err != nil {
        return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
            "error": "Invalid ID",
        })
    }
    if err := h.service.Delete{{.Name}}(uint(id)); err != nil {
        return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
            "error": err.Error(),
        })
    }
    return c.SendStatus(fiber.StatusNoContent)
}
